//PROBLEM 2 - Even Fibonacci Numbers

//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

public class q2_evenFibonacciNumbers {

    public static int fibonacci(int n){ // method for calculating nth term of fibonacci sequence
        if(n == 1 || n == 0){
            return 1;
        } else {
            return fibonacci(n-1) + fibonacci(n - 2);
        }
    }

    public static void main(String args[]){

        //each even value of the fibonacci sequence is every third value of the series.
        //thus, if we iterate through values of fibonacci(2), fibonacci(2+3n), fibonacci(2+2(3n))... we will get our answer.

        //although this brute force solution is quite inneficient, 4 million still technically be low enough to not run out of memory.
        //if the number was greater, say 40 million, memiozation would most likely be used to get each value.

        //only calculating every 3rd term means the amount of calls to the recursive function is divided by 3.
        //this makes our algorithm a tiny bit more efficient.

        int sum = 0;
        int n = 0;
        int fibTerm = 0;

        while(fibTerm<4*Math.pow(10, 6)){ //use of variable to prevent calculating twice
            sum += fibTerm;
            fibTerm = fibonacci(2 + 3*n);
            n++;
        } //the highest term calculated is 34th term (the 11th calculated term), which is what ends the loop.

        System.out.println(sum); //returns 4613732, our answer
    }


}